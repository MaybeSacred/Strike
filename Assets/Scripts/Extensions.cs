// //Created by Jon Tyson : jtyson3@gatech.edu
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;

public static class Extensions
{
	/// <summary>
	/// Returns the maximum item in the list using the given comparer
	/// </summary>
	/// <param name="enumerable">Enumerable.</param>
	/// <param name="comparer">Comparer.</param>
	/// <typeparam name="TSource">The 1st type parameter.</typeparam>
	public static TSource Max<TSource> (this IEnumerable<TSource> enumerable, Func<TSource, double> comparer)
	{
		var i = double.NegativeInfinity;
		var outValue = default(TSource);
		foreach (var temp in enumerable) {
			var value = comparer (temp);
			if (value > i) {
				outValue = temp;
				i = value;
			}
		}
		return outValue;
	}
	/// <summary>
	/// Returns the maximum item in the list using the given comparer
	/// </summary>
	/// <param name="enumerable">Enumerable.</param>
	/// <param name="comparer">Comparer.</param>
	/// <typeparam name="TSource">The 1st type parameter.</typeparam>
	public static TSource Max<TSource> (this IEnumerable<TSource> enumerable, Func<TSource, int> comparer)
	{
		var i = int.MinValue;
		var outValue = default(TSource);
		foreach (var temp in enumerable) {
			var value = comparer (temp);
			if (value > i) {
				outValue = temp;
				i = value;
			}
		}
		return outValue;
	}
	/// <summary>
	/// Returns the minimum item in the list using the given comparer
	/// </summary>
	/// <param name="enumerable">Enumerable.</param>
	/// <param name="comparer">Comparer.</param>
	/// <typeparam name="TSource">The 1st type parameter.</typeparam>
	public static TSource Min<TSource> (this IEnumerable<TSource> enumerable, Func<TSource, double> comparer)
	{
		var i = double.PositiveInfinity;
		var outValue = default(TSource);
		foreach (var temp in enumerable) {
			var value = comparer (temp);
			if (value < i) {
				outValue = temp;
				i = value;
			}
		}
		return outValue;
	}
	/// <summary>
	/// Returns the minimum item in the list using the given comparer
	/// </summary>
	/// <param name="enumerable">Enumerable.</param>
	/// <param name="comparer">Comparer.</param>
	/// <typeparam name="TSource">The 1st type parameter.</typeparam>
	public static TSource Min<TSource> (this IEnumerable<TSource> enumerable, Func<TSource, int> comparer)
	{
		var i = int.MinValue;
		var outValue = default(TSource);
		foreach (var temp in enumerable) {
			var value = comparer (temp);
			if (value < i) {
				outValue = temp;
				i = value;
			}
		}
		return outValue;
	}
}

