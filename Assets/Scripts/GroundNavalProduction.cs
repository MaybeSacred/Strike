// //Created by Jon Tyson : jtyson3@gatech.edu
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
/// <summary>
/// Defines production rules for maps with factories and shipyards only
/// </summary>
public class GroundNavalProduction
{
	public GroundNavalProduction ()
	{
	}
	
	public List<ProductionEngine.ProductionRule> GetRules ()
	{
		List<ProductionEngine.ProductionRule> rules = new List<ProductionEngine.ProductionRule> ();
		rules.Add (SupplyShipRule);
		return rules;
	}
	/// <summary>
	/// When to build supply ships for transporting units
	/// </summary>
	/// <returns>The ground rule.</returns>
	/// <param name="data">Data.</param>
	/// <param name="thisPlayer">This player.</param>
	List<Tuple<UnitName, float>> SupplyShipRule (Instance data, Player thisPlayer)
	{
		List<Tuple<UnitName, float>> outList = new List<Tuple<UnitName, float>> ();
		if (data.playerUnitCount [(int)UnitName.SupplyShip] < 2) {
			outList.Add (new Tuple<UnitName, float> (UnitName.SupplyShip, .25f));
			// Suppress expensive ground unit production
			outList.Add (new Tuple<UnitName, float> (UnitName.MediumTank, -.25f));
			outList.Add (new Tuple<UnitName, float> (UnitName.Rockets, -.25f));
			outList.Add (new Tuple<UnitName, float> (UnitName.LightTank, -.25f));
		}
		return outList;
	}
}

