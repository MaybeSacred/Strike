// //Created by Jon Tyson : jtyson3@gatech.edu
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System.Collections.Generic;
using System;
using System.Reflection;
using UnityEngine;
public partial class ProductionEngine
{
	List<ProductionRule> rules;
	/// <summary>
	/// A list of unitNames and their associated frequencies
	/// </summary>
	Dictionary<UnitNames, float> frequencyList;
	public ProductionEngine ()
	{
		rules = new List<ProductionRule>();
		frequencyList = new Dictionary<UnitNames, float>();
		foreach(UnitNames u in System.Enum.GetValues(typeof(UnitNames))){
			frequencyList.Add(u, 0);
		}
		rules.Add(AlwaysInfantryRule);
	}
	/// <summary>
	/// A rule for the production engine. Returns a list of possible units to make given the counts of enemy units
	/// </summary>
	/// <param name="player">Player.</param>
	public delegate List<UnitNames> ProductionRule(Instance data, Player thisPlayer);
	/// <summary>
	/// Evaluates the currently stored rules, selecting a best unit and returning it
	/// </summary>
	/// <param name="player">Player.</param>
	public UnitNames Evaluate(Player player){
		frequencyList = ZeroOut(frequencyList);
		// Apply rules
		foreach(ProductionRule pr in rules){
			List<UnitNames> temp = pr.Invoke(InGameController.CreateInstance(UnitNames.Infantry, false), player);
			// Increase returned units in frequency list
			foreach(UnitNames u in temp){
				frequencyList[u]++;
			}
		}
		frequencyList = Normalize(frequencyList);
		UnitNames one = SelectUnit(frequencyList);
		return one;
	}
	/// <summary>
	/// Returns a UnitNames which is selected from the provided Dictionary, 
	/// with higher probability given to units with higher frequencies
	/// </summary>
	/// <returns>The unit.</returns>
	/// <param name="dic">Dic.</param>
	UnitNames SelectUnit(Dictionary<UnitNames, float> dic){
		float randomValue = UnityEngine.Random.value;
		float currentMinimum = 0;
		foreach(UnitNames u in dic.Keys){
			if(currentMinimum + dic[u] >= randomValue){
				return u;
			}
			else{
				currentMinimum += dic[u];
			}
		}
		return UnitNames.Headquarters;
	}
	/// <summary>
	/// Normalizes the values of a dictionary
	/// </summary>
	/// <param name="dic">Dic.</param>
	Dictionary<UnitNames, float> Normalize(Dictionary<UnitNames, float> dic){
		float sum = 0;
		foreach(float value in dic.Values){
			sum += value;
		}
		UnitNames[] copy = new UnitNames[dic.Count];
		dic.Keys.CopyTo(copy, 0);
		for(int i = 0; i < dic.Count; i++){
			dic[copy[i]] /= sum;
		}
		return dic;
	}
	/// <summary>
	/// Zeros out the values stored in the frequency list in preparation for another engine evaluation
	/// </summary>
	/// <returns>The out.</returns>
	/// <param name="dic">Dic.</param>
	Dictionary<UnitNames, float> ZeroOut(Dictionary<UnitNames, float> dic){
		UnitNames[] copy = new UnitNames[dic.Count];
		dic.Keys.CopyTo(copy, 0);
		for(int i = 0; i < dic.Count; i++){
			dic[copy[i]] = 0;
		}
		return dic;
	}
	/// <summary>
	/// Always produces an infantry
	/// </summary>
	/// <returns>The infantry rule.</returns>
	/// <param name="data">Data.</param>
	/// <param name="thisPlayer">This player.</param>
	public List<UnitNames> AlwaysInfantryRule(Instance data, Player thisPlayer){
		return new List<UnitNames>(new UnitNames[]{UnitNames.Infantry});
	}
	/// <summary>
	/// Adds a production rule to the engine for evaluation. See <see cref=""/>
	/// </summary>
	/// <param name="pr">Pr.</param>
	public void AddProductionRule(ProductionRule pr){
		rules.Add(pr);
	}
}
