// //Created by Jon Tyson : jtyson3@gatech.edu
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
public class SkirmishMenuViewer : MonoBehaviour {
	public static SkirmishMenuViewer instance;
	List<MapData> maps;
	string[] mapNames;
	string selectedMapName;
	MapData selectedMap;
	
	public PlayerGUIView[] players;
	string[] generalNames;
	GameSettings settings;
	public Player playerPrototype;
	//new GUI stuff							//parent panel to load buttons to
	public RectTransform mapNameLoadButton, mapNamePanel;
	//spacing for between button centers
	public int mapNameButtonOffset;
	public RectTransform mapSelect, playerSelect;
	//current root folder where map data are located
	public static string ApplicationServerURL = "https://dl.dropboxusercontent.com/u/65011402/strike";
	void Awake(){
		instance = this;
	}
	// Use this for initialization
	void Start () {
		settings = new GameSettings();
		generalNames = System.Enum.GetNames(typeof(Generals));
		mapNames = GetMapNames();
		mapNames = ExtractPrettyMapNames(mapNames);
		LoadMapMetaData(mapNames);
		int smallestFontSize = int.MaxValue;
		List<RectTransform> mapButtons = new List<RectTransform>();
		foreach(string name in mapNames){
			RectTransform t = InstantiateUIPrefab(mapNameLoadButton, mapNamePanel);
			t.GetComponentsInChildren<UnityEngine.UI.Text>(true)[0].text = name;
			mapButtons.Add(t);
			string captured = name;
			//add our delegate to the onClick handler, with appropriate indexing
			t.GetComponent<UnityEngine.UI.Button>().onClick.AddListener(() => {SetCurrentMap(captured);});
			smallestFontSize = Mathf.Min(smallestFontSize, t.GetComponentsInChildren<UnityEngine.UI.Text>(true)[0].fontSize);
		}
		var offset = -mapNameButtonOffset/2;
		foreach(RectTransform rt in mapButtons){
			rt.anchoredPosition3D = new Vector3(0, offset, 0);
			offset -= mapNameButtonOffset;
		}
		if(Mathf.Abs(offset) > mapNamePanel.rect.height){
			mapNamePanel.offsetMax = new Vector2(mapNamePanel.offsetMax.x, offset);
		}
		SetCurrentMap(mapNames[0]);
	}
	/// <summary>
	/// Sets the current mapData from the provided map name
	/// </summary>
	/// <param name="map">Map.</param>
	void SetCurrentMap(string map){
		selectedMapName = map;
		Debug.Log(map);
		foreach(MapData mp in maps){
			if(mp.mapName.Equals(selectedMapName)){
				selectedMap = mp;
				return;
			}
		}
		throw new UnityException("Could not find map");
		// Do map loading and viewing here
	}
	/// <summary>
	/// Instantiates a correctly set up UI component from a prefab
	/// </summary>
	/// <returns>The user interface prefab.</returns>
	/// <param name="objectToCopy">Object to copy.</param>
	public static RectTransform InstantiateUIPrefab(RectTransform objectToCopy, RectTransform parent){
		RectTransform temp = Instantiate(objectToCopy, objectToCopy.position, Quaternion.identity) as RectTransform;
		temp.SetParent(parent.transform);
		temp.localPosition = objectToCopy.localPosition;
		temp.localScale = new Vector3(1, 1, 1);
		temp.localRotation = Quaternion.identity;
		return temp;
	}
	/// <summary>
	/// Gets the map names from file
	/// </summary>
	/// <returns>The map names.</returns>
	public string[] GetMapNames(){
#if UNITY_WEBPLAYER
		var names = new WWW(ApplicationServerURL + "/Maps/MapNames.bin");
		while(!names.isDone){
			
		}
		MemoryStream ms = new MemoryStream(names.bytes);
		BinaryFormatter deserializer = new BinaryFormatter();
		string[] obj = (string[])deserializer.Deserialize(ms);
		return obj;
#endif
#if UNITY_STANDALONE
		if(File.Exists(Application.dataPath + @"\Maps\MapNames.bin"))
		{
			Stream TestFileStream = File.OpenRead(Application.dataPath + @"\Maps\MapNames.bin");
			BinaryFormatter deserializer = new BinaryFormatter();
			string[] obj = (string[])deserializer.Deserialize(TestFileStream);
			TestFileStream.Close();
			return obj;
		}
		else
		{
			Debug.Log("Could not open MapNames data");
		}
#endif
		return null;
	}
	
	public void SetGameSettingsPropertyIncome(int input){
		settings.propertyBaseFunds = input;
	}
	
	public void SetGameSettingsStartingIncome(int input){
		settings.startingFunds = input;
	}
	/// <summary>
	/// Loads the map meta data for provided names
	/// </summary>
	/// <param name="namesToLoad">Names to load.</param>
	void LoadMapMetaData(string[] namesToLoad)
	{
		maps = new List<MapData>();
#if UNITY_WEBPLAYER
		for(int i = 0; i < namesToLoad.Length; i++)
		{
			var names = new WWW(ApplicationServerURL + "/Maps/MapNames.bin");
			while(!names.isDone){
				
			}
			MemoryStream ms = new MemoryStream(names.bytes);
			BinaryFormatter deserializer = new BinaryFormatter();
			MapData obj = (MapData)deserializer.Deserialize(ms);
			maps.Add(obj);
		}
#endif
#if UNITY_STANDALONE
		for(int i = 0; i < namesToLoad.Length; i++)
		{
			if(File.Exists(Application.dataPath + @"\Maps\" + namesToLoad[i] + ".bin"))
			{
				Stream TestFileStream = File.OpenRead(Application.dataPath + @"\Maps\" + namesToLoad[i] + ".bin");
				BinaryFormatter deserializer = new BinaryFormatter();
				MapData obj = (MapData)deserializer.Deserialize(TestFileStream);
				maps.Add(obj);
				TestFileStream.Close();
			}
			else
			{
				Debug.Log("No data found for map: " + namesToLoad[i]);
			}
		}
#endif
	}
	/// <summary>
	/// Processes an array of strings to remove extra file junk
	/// </summary>
	/// <returns>The pretty map names.</returns>
	/// <param name="inNames">In names.</param>
	string[] ExtractPrettyMapNames(string[] inNames)
	{
		for(int i = 0; i < inNames.Length; i++)
		{
			string[] temp = inNames[i].Split(new string[]{"\\", "/", "."}, System.StringSplitOptions.RemoveEmptyEntries);
			if(temp.Length > 1)
			{
				inNames[i] = temp[temp.Length-2];
			}
		}
		return inNames;
	}
	void Update () {
		transform.eulerAngles += new Vector3(0, .5f * Time.deltaTime, 0);
	}
	
	/// <summary>
	/// Switches panels to player setup
	/// </summary>
	public void SwitchToPlayerSelect(){
		mapSelect.gameObject.SetActive(false);
		SetPlayersActive(selectedMap.maxPlayers);
		playerSelect.gameObject.SetActive(true);
	}
	/// <summary>
	/// Switches panels to map setup
	/// </summary>
	public void SwitchToMapSelect(){
		mapSelect.gameObject.SetActive(true);
		playerSelect.gameObject.SetActive(false);
	}
	public void ToggleFogOfWar(bool inBool){
		settings.fogOfWarEnabled = inBool;
	}
	/// <summary>
	/// Sets active player configuration panels and hides inactive ones
	/// </summary>
	/// <param name="activePlayers">Number of panels to set active</param>
	void SetPlayersActive(int activePlayers){
		for(int i = 0; i < 8; i++){
			if(i < activePlayers){
				players[i].gameObject.SetActive(true);
			}
			else{
				players[i].gameObject.SetActive(false);
			}
		}
	}
	/// <summary>
	/// Starts the game.
	/// </summary>
	public void StartGame()
	{
		settings.startingFunds = GameObject.Find("Input StartingFunds").GetComponent<IncrementButton>().GetValue();
		settings.propertyBaseFunds = GameObject.Find("Input PropertyIncome").GetComponent<IncrementButton>().GetValue();
		settings.selectedWeather = WeatherToggle.instance.GetSelectedWeatherTypes();
		Player[] temp = new Player[selectedMap.maxPlayers + 1];
		temp[0] = Instantiate(playerPrototype) as Player;
		temp[0].Setup(0, Generals.Taron, new Color(.8f, .8f, .8f), "--Neutral--");
		temp[0].SetPlayerNumber(0);
		for(int i = 1; i < players.Length + 1; i++)
		{
			if(i < temp.Length)
			{
				temp[i] = players[i-1].thisPlayer;
				temp[i].SetPlayerNumber(i);
			}
			else
			{
				Destroy(players[i-1].thisPlayer.gameObject);
				Destroy(players[i-1].gameObject);
			}
		}
		GameObject.FindObjectOfType<Utilities>().LoadSkirmishMap(temp, selectedMapName, settings);
		Destroy(this.gameObject);
	}
}
