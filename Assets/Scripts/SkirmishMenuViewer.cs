// //Created by Jon Tyson : jtyson3@gatech.edu
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34014
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using UnityEngine;
using System.Collections.Generic;
using System.IO;
using System.Runtime.Serialization.Formatters.Binary;
public class SkirmishMenuViewer : MonoBehaviour {
	public float menuXPct, menuYPct;
	public GUIStyle style;
	private List<MapData> maps;
	private string[] mapNames;
	private MapData selectedMap;
	private Popup.ListState mapSelectionDropdown;
	private bool weatherSelectionDropDownActive;
	private int weatherSelectionDropDownIndex;
	private Player[] players;
	private Popup.ListState[] generalDropdownStates, aiDropdownStates, playerSideDropdownStates;
	private string[] generalNames;
	public Texture2D colorTexture;
	private GameSettings settings;
	public Player playerPrototype;
	public RectTransform playerGUIProto;
	public Canvas mapSelect, playerSelect;
	// Use this for initialization
	void Start () {
		players = new Player[8];
		mapSelectionDropdown = new Popup.ListState();
		generalDropdownStates = new Popup.ListState[8];
		aiDropdownStates = new Popup.ListState[8];
		playerSideDropdownStates = new Popup.ListState[8];
		for(int i = 0; i < generalDropdownStates.Length; i++)
		{
			generalDropdownStates[i] = new Popup.ListState();
			aiDropdownStates[i] = new Popup.ListState();
			playerSideDropdownStates[i] = new Popup.ListState();
		}
		settings = new GameSettings();
		generalNames = System.Enum.GetNames(typeof(Generals));
		for(int i = 0; i < players.Length;i++)
		{
			players[i] = Instantiate(playerPrototype) as Player;
			players[i].loggingProductionData = true;
			players[i].Setup(i+1, "", Color.white, "-Enter Name-");
			players[i].menuColorTexture = Instantiate(colorTexture) as Texture2D;
			players[i].currentHue = Random.Range(0, 256);
			players[i].side = i+1;
		}
		mapNames = Directory.GetFiles(Application.dataPath + @"\Maps\", "*.unity");
		mapNames = ExtractPrettyMapNames(mapNames);
		LoadMapMetaData();
	}
	void LoadMapMetaData()
	{
		maps = new List<MapData>();
		for(int i = 0; i < mapNames.Length; i++)
		{
			if(File.Exists(Application.dataPath + @"\Maps\" + mapNames[i] + ".bin"))
			{
				Stream TestFileStream = File.OpenRead(Application.dataPath + @"\Maps\" + mapNames[i] + ".bin");
				BinaryFormatter deserializer = new BinaryFormatter();
				MapData obj = (MapData)deserializer.Deserialize(TestFileStream);
				maps.Add(obj);
				TestFileStream.Close();
			}
			else
			{
				Debug.Log("No data found for map: " + mapNames[i]);
			}
		}
	}
	string[] ExtractPrettyMapNames(string[] inNames)
	{
		for(int i = 0; i < inNames.Length; i++)
		{
			string[] temp = inNames[i].Split(new string[]{"\\", "/", "."}, System.StringSplitOptions.RemoveEmptyEntries);
			if(temp.Length > 1)
			{
				inNames[i] = temp[temp.Length-2];
			}
		}
		return inNames;
	}
	void Update () {
		transform.rotation *= Quaternion.AngleAxis(1f*Time.deltaTime, new Vector3(0, 1, 0));
	}
	private float playerItemWidthPct = .1f;
	int scrollPosition;
	
	public void SwitchToPlayerSelect(){
		mapSelect.gameObject.SetActive(false);
		SetPlayersActive();
		playerSelect.gameObject.SetActive(true);
	}
	public void SwitchToMapSelect(){
		mapSelect.gameObject.SetActive(true);
		playerSelect.gameObject.SetActive(false);
	}
	void SetPlayersActive(){
		for(int i = 0; i < 8; i++){
			if(i < selectedMap.maxPlayers){
				
			}
		}
	}
	void ListCallBackFunc()
	{
		
	}
	public void StartGame()
	{
		Player[] temp = new Player[maps[mapSelectionDropdown.listEntry].maxPlayers + 1];
		temp[0] = Instantiate(playerPrototype) as Player;
		temp[0].Setup(0, "Taron", new Color(.8f, .8f, .8f), "--Neutral--");
		temp[0].generalInStartMenu = "Taron";
		for(int i = 1; i < players.Length + 1; i++)
		{
			if(i < temp.Length)
			{
				temp[i] = players[i-1];
				temp[i].generalInStartMenu = generalNames[temp[i].menuGeneralNumberSelected];
				temp[i].aiLevel = (AILevel)System.Enum.GetValues(typeof(AILevel)).GetValue(aiDropdownStates[i-1].listEntry);
			}
			else
			{
				Destroy(players[i-1]);
			}
		}
		GameObject.FindObjectOfType<Utilities>().LoadSkirmishMap(temp, mapNames[mapSelectionDropdown.listEntry], settings);
		Destroy(this.gameObject);
	}
	void SetColor(Texture2D tex, Color col)
	{
		Color[] colors = new Color[Mathf.RoundToInt(tex.width * tex.height)];
		for(int i = 0; i < colors.Length; i++)
		{
			colors[i] = col;
		}
		tex.SetPixels(colors);
		tex.Apply();
	}
	Color HSVtoRGB(float h, float s, float v )
	{
		int i;
		float f, p, q, t;
		Color outColor = new Color();
		outColor.a = 1;
		if( s == 0 ) {
			// achromatic (grey)
			outColor.r = outColor.g = outColor.b = v;
			return outColor;
		}
		h /= 60;			// sector 0 to 5
		i = Mathf.FloorToInt(h);
		f = h - i;			// factorial part of h
		p = v * ( 1 - s );
		q = v * ( 1 - s * f );
		t = v * ( 1 - s * ( 1 - f ) );
		
		switch( i ) {
		case 0:
			outColor.r = v;
			outColor.g = t;
			outColor.b = p;
			break;
		case 1:
			outColor.r = q;
			outColor.g = v;
			outColor.b = p;
			break;
		case 2:
			outColor.r = p;
			outColor.g = v;
			outColor.b = t;
			break;
		case 3:
			outColor.r = p;
			outColor.g = q;
			outColor.b = v;
			break;
		case 4:
			outColor.r = t;
			outColor.g = p;
			outColor.b = v;
			break;
		default:		// case 5:
			outColor.r = v;
			outColor.g = p;
			outColor.b = q;
			break;
		}
		return outColor;
	}
}
